/* automatically generated by rust-bindgen 0.65.1 */

pub const UPLINK_ERROR_INTERNAL: u32 = 2;
pub const UPLINK_ERROR_CANCELED: u32 = 3;
pub const UPLINK_ERROR_INVALID_HANDLE: u32 = 4;
pub const UPLINK_ERROR_TOO_MANY_REQUESTS: u32 = 5;
pub const UPLINK_ERROR_BANDWIDTH_LIMIT_EXCEEDED: u32 = 6;
pub const UPLINK_ERROR_STORAGE_LIMIT_EXCEEDED: u32 = 7;
pub const UPLINK_ERROR_SEGMENTS_LIMIT_EXCEEDED: u32 = 8;
pub const UPLINK_ERROR_BUCKET_NAME_INVALID: u32 = 16;
pub const UPLINK_ERROR_BUCKET_ALREADY_EXISTS: u32 = 17;
pub const UPLINK_ERROR_BUCKET_NOT_EMPTY: u32 = 18;
pub const UPLINK_ERROR_BUCKET_NOT_FOUND: u32 = 19;
pub const UPLINK_ERROR_OBJECT_KEY_INVALID: u32 = 32;
pub const UPLINK_ERROR_OBJECT_NOT_FOUND: u32 = 33;
pub const UPLINK_ERROR_UPLOAD_DONE: u32 = 34;
pub const EDGE_ERROR_AUTH_DIAL_FAILED: u32 = 48;
pub const EDGE_ERROR_REGISTER_ACCESS_FAILED: u32 = 49;
pub type uplink_const_char = ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkHandle {
    pub _handle: usize,
}
#[test]
fn bindgen_test_layout_UplinkHandle() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkHandle> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkHandle>(),
        8usize,
        concat!("Size of: ", stringify!(UplinkHandle))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkHandle>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkHandle))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkHandle),
            "::",
            stringify!(_handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkAccess {
    pub _handle: usize,
}
#[test]
fn bindgen_test_layout_UplinkAccess() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkAccess> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkAccess>(),
        8usize,
        concat!("Size of: ", stringify!(UplinkAccess))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkAccess>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkAccess))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkAccess),
            "::",
            stringify!(_handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkProject {
    pub _handle: usize,
}
#[test]
fn bindgen_test_layout_UplinkProject() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkProject> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkProject>(),
        8usize,
        concat!("Size of: ", stringify!(UplinkProject))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkProject>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkProject))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkProject),
            "::",
            stringify!(_handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkDownload {
    pub _handle: usize,
}
#[test]
fn bindgen_test_layout_UplinkDownload() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkDownload> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkDownload>(),
        8usize,
        concat!("Size of: ", stringify!(UplinkDownload))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkDownload>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkDownload))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkDownload),
            "::",
            stringify!(_handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkUpload {
    pub _handle: usize,
}
#[test]
fn bindgen_test_layout_UplinkUpload() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkUpload> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkUpload>(),
        8usize,
        concat!("Size of: ", stringify!(UplinkUpload))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkUpload>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkUpload))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkUpload),
            "::",
            stringify!(_handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkEncryptionKey {
    pub _handle: usize,
}
#[test]
fn bindgen_test_layout_UplinkEncryptionKey() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkEncryptionKey> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkEncryptionKey>(),
        8usize,
        concat!("Size of: ", stringify!(UplinkEncryptionKey))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkEncryptionKey>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkEncryptionKey))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkEncryptionKey),
            "::",
            stringify!(_handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkPartUpload {
    pub _handle: usize,
}
#[test]
fn bindgen_test_layout_UplinkPartUpload() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkPartUpload> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkPartUpload>(),
        8usize,
        concat!("Size of: ", stringify!(UplinkPartUpload))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkPartUpload>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkPartUpload))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkPartUpload),
            "::",
            stringify!(_handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkConfig {
    pub user_agent: *const ::std::os::raw::c_char,
    pub dial_timeout_milliseconds: i32,
    pub temp_directory: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_UplinkConfig() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkConfig> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkConfig>(),
        24usize,
        concat!("Size of: ", stringify!(UplinkConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_agent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkConfig),
            "::",
            stringify!(user_agent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dial_timeout_milliseconds) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkConfig),
            "::",
            stringify!(dial_timeout_milliseconds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temp_directory) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkConfig),
            "::",
            stringify!(temp_directory)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkBucket {
    pub name: *mut ::std::os::raw::c_char,
    pub created: i64,
}
#[test]
fn bindgen_test_layout_UplinkBucket() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkBucket> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkBucket>(),
        16usize,
        concat!("Size of: ", stringify!(UplinkBucket))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkBucket>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkBucket))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkBucket),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).created) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkBucket),
            "::",
            stringify!(created)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkSystemMetadata {
    pub created: i64,
    pub expires: i64,
    pub content_length: i64,
}
#[test]
fn bindgen_test_layout_UplinkSystemMetadata() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkSystemMetadata> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkSystemMetadata>(),
        24usize,
        concat!("Size of: ", stringify!(UplinkSystemMetadata))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkSystemMetadata>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkSystemMetadata))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).created) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkSystemMetadata),
            "::",
            stringify!(created)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expires) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkSystemMetadata),
            "::",
            stringify!(expires)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_length) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkSystemMetadata),
            "::",
            stringify!(content_length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkCustomMetadataEntry {
    pub key: *mut ::std::os::raw::c_char,
    pub key_length: u64,
    pub value: *mut ::std::os::raw::c_char,
    pub value_length: u64,
}
#[test]
fn bindgen_test_layout_UplinkCustomMetadataEntry() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkCustomMetadataEntry> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkCustomMetadataEntry>(),
        32usize,
        concat!("Size of: ", stringify!(UplinkCustomMetadataEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkCustomMetadataEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkCustomMetadataEntry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkCustomMetadataEntry),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkCustomMetadataEntry),
            "::",
            stringify!(key_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkCustomMetadataEntry),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_length) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkCustomMetadataEntry),
            "::",
            stringify!(value_length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkCustomMetadata {
    pub entries: *mut UplinkCustomMetadataEntry,
    pub count: u64,
}
#[test]
fn bindgen_test_layout_UplinkCustomMetadata() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkCustomMetadata> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkCustomMetadata>(),
        16usize,
        concat!("Size of: ", stringify!(UplinkCustomMetadata))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkCustomMetadata>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkCustomMetadata))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entries) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkCustomMetadata),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkCustomMetadata),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkObject {
    pub key: *mut ::std::os::raw::c_char,
    pub is_prefix: bool,
    pub system: UplinkSystemMetadata,
    pub custom: UplinkCustomMetadata,
}
#[test]
fn bindgen_test_layout_UplinkObject() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkObject> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkObject>(),
        56usize,
        concat!("Size of: ", stringify!(UplinkObject))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkObject>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkObject))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkObject),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_prefix) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkObject),
            "::",
            stringify!(is_prefix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkObject),
            "::",
            stringify!(system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkObject),
            "::",
            stringify!(custom)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkUploadOptions {
    pub expires: i64,
}
#[test]
fn bindgen_test_layout_UplinkUploadOptions() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkUploadOptions> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkUploadOptions>(),
        8usize,
        concat!("Size of: ", stringify!(UplinkUploadOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkUploadOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkUploadOptions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expires) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkUploadOptions),
            "::",
            stringify!(expires)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkDownloadOptions {
    pub offset: i64,
    pub length: i64,
}
#[test]
fn bindgen_test_layout_UplinkDownloadOptions() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkDownloadOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkDownloadOptions>(),
        16usize,
        concat!("Size of: ", stringify!(UplinkDownloadOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkDownloadOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkDownloadOptions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkDownloadOptions),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkDownloadOptions),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkListObjectsOptions {
    pub prefix: *const ::std::os::raw::c_char,
    pub cursor: *const ::std::os::raw::c_char,
    pub recursive: bool,
    pub system: bool,
    pub custom: bool,
}
#[test]
fn bindgen_test_layout_UplinkListObjectsOptions() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkListObjectsOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkListObjectsOptions>(),
        24usize,
        concat!("Size of: ", stringify!(UplinkListObjectsOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkListObjectsOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkListObjectsOptions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prefix) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkListObjectsOptions),
            "::",
            stringify!(prefix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cursor) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkListObjectsOptions),
            "::",
            stringify!(cursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recursive) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkListObjectsOptions),
            "::",
            stringify!(recursive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkListObjectsOptions),
            "::",
            stringify!(system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkListObjectsOptions),
            "::",
            stringify!(custom)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkListUploadsOptions {
    pub prefix: *const ::std::os::raw::c_char,
    pub cursor: *const ::std::os::raw::c_char,
    pub recursive: bool,
    pub system: bool,
    pub custom: bool,
}
#[test]
fn bindgen_test_layout_UplinkListUploadsOptions() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkListUploadsOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkListUploadsOptions>(),
        24usize,
        concat!("Size of: ", stringify!(UplinkListUploadsOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkListUploadsOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkListUploadsOptions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prefix) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkListUploadsOptions),
            "::",
            stringify!(prefix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cursor) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkListUploadsOptions),
            "::",
            stringify!(cursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recursive) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkListUploadsOptions),
            "::",
            stringify!(recursive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkListUploadsOptions),
            "::",
            stringify!(system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkListUploadsOptions),
            "::",
            stringify!(custom)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkListBucketsOptions {
    pub cursor: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_UplinkListBucketsOptions() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkListBucketsOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkListBucketsOptions>(),
        8usize,
        concat!("Size of: ", stringify!(UplinkListBucketsOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkListBucketsOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkListBucketsOptions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cursor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkListBucketsOptions),
            "::",
            stringify!(cursor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkObjectIterator {
    pub _handle: usize,
}
#[test]
fn bindgen_test_layout_UplinkObjectIterator() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkObjectIterator> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkObjectIterator>(),
        8usize,
        concat!("Size of: ", stringify!(UplinkObjectIterator))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkObjectIterator>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkObjectIterator))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkObjectIterator),
            "::",
            stringify!(_handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkBucketIterator {
    pub _handle: usize,
}
#[test]
fn bindgen_test_layout_UplinkBucketIterator() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkBucketIterator> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkBucketIterator>(),
        8usize,
        concat!("Size of: ", stringify!(UplinkBucketIterator))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkBucketIterator>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkBucketIterator))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkBucketIterator),
            "::",
            stringify!(_handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkUploadIterator {
    pub _handle: usize,
}
#[test]
fn bindgen_test_layout_UplinkUploadIterator() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkUploadIterator> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkUploadIterator>(),
        8usize,
        concat!("Size of: ", stringify!(UplinkUploadIterator))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkUploadIterator>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkUploadIterator))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkUploadIterator),
            "::",
            stringify!(_handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkPartIterator {
    pub _handle: usize,
}
#[test]
fn bindgen_test_layout_UplinkPartIterator() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkPartIterator> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkPartIterator>(),
        8usize,
        concat!("Size of: ", stringify!(UplinkPartIterator))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkPartIterator>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkPartIterator))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkPartIterator),
            "::",
            stringify!(_handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkPermission {
    pub allow_download: bool,
    pub allow_upload: bool,
    pub allow_list: bool,
    pub allow_delete: bool,
    pub not_before: i64,
    pub not_after: i64,
}
#[test]
fn bindgen_test_layout_UplinkPermission() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkPermission> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkPermission>(),
        24usize,
        concat!("Size of: ", stringify!(UplinkPermission))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkPermission>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkPermission))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allow_download) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkPermission),
            "::",
            stringify!(allow_download)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allow_upload) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkPermission),
            "::",
            stringify!(allow_upload)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allow_list) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkPermission),
            "::",
            stringify!(allow_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allow_delete) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkPermission),
            "::",
            stringify!(allow_delete)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_before) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkPermission),
            "::",
            stringify!(not_before)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_after) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkPermission),
            "::",
            stringify!(not_after)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkPart {
    pub part_number: u32,
    pub size: usize,
    pub modified: i64,
    pub etag: *mut ::std::os::raw::c_char,
    pub etag_length: usize,
}
#[test]
fn bindgen_test_layout_UplinkPart() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkPart> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkPart>(),
        40usize,
        concat!("Size of: ", stringify!(UplinkPart))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkPart>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkPart))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).part_number) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkPart),
            "::",
            stringify!(part_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkPart),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modified) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkPart),
            "::",
            stringify!(modified)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).etag) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkPart),
            "::",
            stringify!(etag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).etag_length) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkPart),
            "::",
            stringify!(etag_length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkSharePrefix {
    pub bucket: *const ::std::os::raw::c_char,
    pub prefix: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_UplinkSharePrefix() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkSharePrefix> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkSharePrefix>(),
        16usize,
        concat!("Size of: ", stringify!(UplinkSharePrefix))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkSharePrefix>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkSharePrefix))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bucket) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkSharePrefix),
            "::",
            stringify!(bucket)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prefix) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkSharePrefix),
            "::",
            stringify!(prefix)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkError {
    pub code: i32,
    pub message: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_UplinkError() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkError> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkError>(),
        16usize,
        concat!("Size of: ", stringify!(UplinkError))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkError>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkError))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkError),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkError),
            "::",
            stringify!(message)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkAccessResult {
    pub access: *mut UplinkAccess,
    pub error: *mut UplinkError,
}
#[test]
fn bindgen_test_layout_UplinkAccessResult() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkAccessResult> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkAccessResult>(),
        16usize,
        concat!("Size of: ", stringify!(UplinkAccessResult))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkAccessResult>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkAccessResult))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).access) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkAccessResult),
            "::",
            stringify!(access)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkAccessResult),
            "::",
            stringify!(error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkProjectResult {
    pub project: *mut UplinkProject,
    pub error: *mut UplinkError,
}
#[test]
fn bindgen_test_layout_UplinkProjectResult() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkProjectResult> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkProjectResult>(),
        16usize,
        concat!("Size of: ", stringify!(UplinkProjectResult))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkProjectResult>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkProjectResult))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).project) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkProjectResult),
            "::",
            stringify!(project)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkProjectResult),
            "::",
            stringify!(error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkBucketResult {
    pub bucket: *mut UplinkBucket,
    pub error: *mut UplinkError,
}
#[test]
fn bindgen_test_layout_UplinkBucketResult() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkBucketResult> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkBucketResult>(),
        16usize,
        concat!("Size of: ", stringify!(UplinkBucketResult))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkBucketResult>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkBucketResult))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bucket) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkBucketResult),
            "::",
            stringify!(bucket)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkBucketResult),
            "::",
            stringify!(error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkObjectResult {
    pub object: *mut UplinkObject,
    pub error: *mut UplinkError,
}
#[test]
fn bindgen_test_layout_UplinkObjectResult() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkObjectResult> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkObjectResult>(),
        16usize,
        concat!("Size of: ", stringify!(UplinkObjectResult))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkObjectResult>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkObjectResult))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkObjectResult),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkObjectResult),
            "::",
            stringify!(error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkUploadResult {
    pub upload: *mut UplinkUpload,
    pub error: *mut UplinkError,
}
#[test]
fn bindgen_test_layout_UplinkUploadResult() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkUploadResult> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkUploadResult>(),
        16usize,
        concat!("Size of: ", stringify!(UplinkUploadResult))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkUploadResult>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkUploadResult))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upload) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkUploadResult),
            "::",
            stringify!(upload)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkUploadResult),
            "::",
            stringify!(error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkPartUploadResult {
    pub part_upload: *mut UplinkPartUpload,
    pub error: *mut UplinkError,
}
#[test]
fn bindgen_test_layout_UplinkPartUploadResult() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkPartUploadResult> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkPartUploadResult>(),
        16usize,
        concat!("Size of: ", stringify!(UplinkPartUploadResult))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkPartUploadResult>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkPartUploadResult))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).part_upload) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkPartUploadResult),
            "::",
            stringify!(part_upload)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkPartUploadResult),
            "::",
            stringify!(error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkDownloadResult {
    pub download: *mut UplinkDownload,
    pub error: *mut UplinkError,
}
#[test]
fn bindgen_test_layout_UplinkDownloadResult() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkDownloadResult> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkDownloadResult>(),
        16usize,
        concat!("Size of: ", stringify!(UplinkDownloadResult))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkDownloadResult>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkDownloadResult))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).download) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkDownloadResult),
            "::",
            stringify!(download)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkDownloadResult),
            "::",
            stringify!(error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkWriteResult {
    pub bytes_written: usize,
    pub error: *mut UplinkError,
}
#[test]
fn bindgen_test_layout_UplinkWriteResult() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkWriteResult> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkWriteResult>(),
        16usize,
        concat!("Size of: ", stringify!(UplinkWriteResult))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkWriteResult>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkWriteResult))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes_written) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkWriteResult),
            "::",
            stringify!(bytes_written)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkWriteResult),
            "::",
            stringify!(error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkReadResult {
    pub bytes_read: usize,
    pub error: *mut UplinkError,
}
#[test]
fn bindgen_test_layout_UplinkReadResult() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkReadResult> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkReadResult>(),
        16usize,
        concat!("Size of: ", stringify!(UplinkReadResult))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkReadResult>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkReadResult))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes_read) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkReadResult),
            "::",
            stringify!(bytes_read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkReadResult),
            "::",
            stringify!(error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkStringResult {
    pub string: *mut ::std::os::raw::c_char,
    pub error: *mut UplinkError,
}
#[test]
fn bindgen_test_layout_UplinkStringResult() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkStringResult> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkStringResult>(),
        16usize,
        concat!("Size of: ", stringify!(UplinkStringResult))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkStringResult>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkStringResult))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkStringResult),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkStringResult),
            "::",
            stringify!(error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkEncryptionKeyResult {
    pub encryption_key: *mut UplinkEncryptionKey,
    pub error: *mut UplinkError,
}
#[test]
fn bindgen_test_layout_UplinkEncryptionKeyResult() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkEncryptionKeyResult> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkEncryptionKeyResult>(),
        16usize,
        concat!("Size of: ", stringify!(UplinkEncryptionKeyResult))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkEncryptionKeyResult>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkEncryptionKeyResult))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encryption_key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkEncryptionKeyResult),
            "::",
            stringify!(encryption_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkEncryptionKeyResult),
            "::",
            stringify!(error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkUploadInfo {
    pub upload_id: *mut ::std::os::raw::c_char,
    pub key: *mut ::std::os::raw::c_char,
    pub is_prefix: bool,
    pub system: UplinkSystemMetadata,
    pub custom: UplinkCustomMetadata,
}
#[test]
fn bindgen_test_layout_UplinkUploadInfo() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkUploadInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkUploadInfo>(),
        64usize,
        concat!("Size of: ", stringify!(UplinkUploadInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkUploadInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkUploadInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upload_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkUploadInfo),
            "::",
            stringify!(upload_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkUploadInfo),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_prefix) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkUploadInfo),
            "::",
            stringify!(is_prefix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkUploadInfo),
            "::",
            stringify!(system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkUploadInfo),
            "::",
            stringify!(custom)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkUploadInfoResult {
    pub info: *mut UplinkUploadInfo,
    pub error: *mut UplinkError,
}
#[test]
fn bindgen_test_layout_UplinkUploadInfoResult() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkUploadInfoResult> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkUploadInfoResult>(),
        16usize,
        concat!("Size of: ", stringify!(UplinkUploadInfoResult))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkUploadInfoResult>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkUploadInfoResult))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkUploadInfoResult),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkUploadInfoResult),
            "::",
            stringify!(error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkCommitUploadOptions {
    pub custom_metadata: UplinkCustomMetadata,
}
#[test]
fn bindgen_test_layout_UplinkCommitUploadOptions() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkCommitUploadOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkCommitUploadOptions>(),
        16usize,
        concat!("Size of: ", stringify!(UplinkCommitUploadOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkCommitUploadOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkCommitUploadOptions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom_metadata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkCommitUploadOptions),
            "::",
            stringify!(custom_metadata)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkCommitUploadResult {
    pub object: *mut UplinkObject,
    pub error: *mut UplinkError,
}
#[test]
fn bindgen_test_layout_UplinkCommitUploadResult() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkCommitUploadResult> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkCommitUploadResult>(),
        16usize,
        concat!("Size of: ", stringify!(UplinkCommitUploadResult))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkCommitUploadResult>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkCommitUploadResult))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkCommitUploadResult),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkCommitUploadResult),
            "::",
            stringify!(error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkPartResult {
    pub part: *mut UplinkPart,
    pub error: *mut UplinkError,
}
#[test]
fn bindgen_test_layout_UplinkPartResult() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkPartResult> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkPartResult>(),
        16usize,
        concat!("Size of: ", stringify!(UplinkPartResult))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkPartResult>(),
        8usize,
        concat!("Alignment of ", stringify!(UplinkPartResult))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).part) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkPartResult),
            "::",
            stringify!(part)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkPartResult),
            "::",
            stringify!(error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkListUploadPartsOptions {
    pub cursor: u32,
}
#[test]
fn bindgen_test_layout_UplinkListUploadPartsOptions() {
    const UNINIT: ::std::mem::MaybeUninit<UplinkListUploadPartsOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UplinkListUploadPartsOptions>(),
        4usize,
        concat!("Size of: ", stringify!(UplinkListUploadPartsOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkListUploadPartsOptions>(),
        4usize,
        concat!("Alignment of ", stringify!(UplinkListUploadPartsOptions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cursor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UplinkListUploadPartsOptions),
            "::",
            stringify!(cursor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EdgeConfig {
    pub auth_service_address: *const ::std::os::raw::c_char,
    pub certificate_pem: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_EdgeConfig() {
    const UNINIT: ::std::mem::MaybeUninit<EdgeConfig> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<EdgeConfig>(),
        16usize,
        concat!("Size of: ", stringify!(EdgeConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<EdgeConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(EdgeConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).auth_service_address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EdgeConfig),
            "::",
            stringify!(auth_service_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).certificate_pem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EdgeConfig),
            "::",
            stringify!(certificate_pem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EdgeRegisterAccessOptions {
    pub is_public: bool,
}
#[test]
fn bindgen_test_layout_EdgeRegisterAccessOptions() {
    const UNINIT: ::std::mem::MaybeUninit<EdgeRegisterAccessOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<EdgeRegisterAccessOptions>(),
        1usize,
        concat!("Size of: ", stringify!(EdgeRegisterAccessOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<EdgeRegisterAccessOptions>(),
        1usize,
        concat!("Alignment of ", stringify!(EdgeRegisterAccessOptions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_public) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EdgeRegisterAccessOptions),
            "::",
            stringify!(is_public)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EdgeCredentials {
    pub access_key_id: *const ::std::os::raw::c_char,
    pub secret_key: *const ::std::os::raw::c_char,
    pub endpoint: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_EdgeCredentials() {
    const UNINIT: ::std::mem::MaybeUninit<EdgeCredentials> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<EdgeCredentials>(),
        24usize,
        concat!("Size of: ", stringify!(EdgeCredentials))
    );
    assert_eq!(
        ::std::mem::align_of::<EdgeCredentials>(),
        8usize,
        concat!("Alignment of ", stringify!(EdgeCredentials))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).access_key_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EdgeCredentials),
            "::",
            stringify!(access_key_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).secret_key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EdgeCredentials),
            "::",
            stringify!(secret_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endpoint) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EdgeCredentials),
            "::",
            stringify!(endpoint)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EdgeCredentialsResult {
    pub credentials: *mut EdgeCredentials,
    pub error: *mut UplinkError,
}
#[test]
fn bindgen_test_layout_EdgeCredentialsResult() {
    const UNINIT: ::std::mem::MaybeUninit<EdgeCredentialsResult> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<EdgeCredentialsResult>(),
        16usize,
        concat!("Size of: ", stringify!(EdgeCredentialsResult))
    );
    assert_eq!(
        ::std::mem::align_of::<EdgeCredentialsResult>(),
        8usize,
        concat!("Alignment of ", stringify!(EdgeCredentialsResult))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).credentials) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EdgeCredentialsResult),
            "::",
            stringify!(credentials)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EdgeCredentialsResult),
            "::",
            stringify!(error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EdgeShareURLOptions {
    pub raw: bool,
}
#[test]
fn bindgen_test_layout_EdgeShareURLOptions() {
    const UNINIT: ::std::mem::MaybeUninit<EdgeShareURLOptions> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<EdgeShareURLOptions>(),
        1usize,
        concat!("Size of: ", stringify!(EdgeShareURLOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<EdgeShareURLOptions>(),
        1usize,
        concat!("Alignment of ", stringify!(EdgeShareURLOptions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EdgeShareURLOptions),
            "::",
            stringify!(raw)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkMoveObjectOptions {
}
#[test]
fn bindgen_test_layout_UplinkMoveObjectOptions() {
    assert_eq!(
        ::std::mem::size_of::<UplinkMoveObjectOptions>(),
        0usize,
        concat!("Size of: ", stringify!(UplinkMoveObjectOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkMoveObjectOptions>(),
        1usize,
        concat!("Alignment of ", stringify!(UplinkMoveObjectOptions))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkUploadObjectMetadataOptions {
}
#[test]
fn bindgen_test_layout_UplinkUploadObjectMetadataOptions() {
    assert_eq!(
        ::std::mem::size_of::<UplinkUploadObjectMetadataOptions>(),
        0usize,
        concat!("Size of: ", stringify!(UplinkUploadObjectMetadataOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkUploadObjectMetadataOptions>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(UplinkUploadObjectMetadataOptions)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkCopyObjectOptions {
}
#[test]
fn bindgen_test_layout_UplinkCopyObjectOptions() {
    assert_eq!(
        ::std::mem::size_of::<UplinkCopyObjectOptions>(),
        0usize,
        concat!("Size of: ", stringify!(UplinkCopyObjectOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<UplinkCopyObjectOptions>(),
        1usize,
        concat!("Alignment of ", stringify!(UplinkCopyObjectOptions))
    );
}
pub type GoUint8 = ::std::os::raw::c_uchar;
pub type GoInt64 = ::std::os::raw::c_longlong;
pub type GoInt = GoInt64;
extern "C" {
    pub fn uplink_parse_access(accessString: *const ::std::os::raw::c_char) -> UplinkAccessResult;
}
extern "C" {
    pub fn uplink_request_access_with_passphrase(
        satellite_address: *const ::std::os::raw::c_char,
        api_key: *const ::std::os::raw::c_char,
        passphrase: *const ::std::os::raw::c_char,
    ) -> UplinkAccessResult;
}
extern "C" {
    pub fn uplink_access_satellite_address(access: *mut UplinkAccess) -> UplinkStringResult;
}
extern "C" {
    pub fn uplink_access_serialize(access: *mut UplinkAccess) -> UplinkStringResult;
}
extern "C" {
    pub fn uplink_access_share(
        access: *mut UplinkAccess,
        permission: UplinkPermission,
        prefixes: *mut UplinkSharePrefix,
        prefixes_count: GoInt,
    ) -> UplinkAccessResult;
}
extern "C" {
    pub fn uplink_access_override_encryption_key(
        access: *mut UplinkAccess,
        bucket: *const ::std::os::raw::c_char,
        prefix: *const ::std::os::raw::c_char,
        encryptionKey: *mut UplinkEncryptionKey,
    ) -> *mut UplinkError;
}
extern "C" {
    pub fn uplink_free_string_result(result: UplinkStringResult);
}
extern "C" {
    pub fn uplink_free_access_result(result: UplinkAccessResult);
}
extern "C" {
    pub fn uplink_stat_bucket(
        project: *mut UplinkProject,
        bucket_name: *const ::std::os::raw::c_char,
    ) -> UplinkBucketResult;
}
extern "C" {
    pub fn uplink_create_bucket(
        project: *mut UplinkProject,
        bucket_name: *const ::std::os::raw::c_char,
    ) -> UplinkBucketResult;
}
extern "C" {
    pub fn uplink_ensure_bucket(
        project: *mut UplinkProject,
        bucket_name: *const ::std::os::raw::c_char,
    ) -> UplinkBucketResult;
}
extern "C" {
    pub fn uplink_delete_bucket(
        project: *mut UplinkProject,
        bucket_name: *const ::std::os::raw::c_char,
    ) -> UplinkBucketResult;
}
extern "C" {
    pub fn uplink_delete_bucket_with_objects(
        project: *mut UplinkProject,
        bucket_name: *const ::std::os::raw::c_char,
    ) -> UplinkBucketResult;
}
extern "C" {
    pub fn uplink_free_bucket_result(result: UplinkBucketResult);
}
extern "C" {
    pub fn uplink_free_bucket(bucket: *mut UplinkBucket);
}
extern "C" {
    pub fn uplink_list_buckets(
        project: *mut UplinkProject,
        options: *mut UplinkListBucketsOptions,
    ) -> *mut UplinkBucketIterator;
}
extern "C" {
    pub fn uplink_bucket_iterator_next(iterator: *mut UplinkBucketIterator) -> bool;
}
extern "C" {
    pub fn uplink_bucket_iterator_err(iterator: *mut UplinkBucketIterator) -> *mut UplinkError;
}
extern "C" {
    pub fn uplink_bucket_iterator_item(iterator: *mut UplinkBucketIterator) -> *mut UplinkBucket;
}
extern "C" {
    pub fn uplink_free_bucket_iterator(iterator: *mut UplinkBucketIterator);
}
extern "C" {
    pub fn uplink_config_request_access_with_passphrase(
        config: UplinkConfig,
        satellite_address: *const ::std::os::raw::c_char,
        api_key: *const ::std::os::raw::c_char,
        passphrase: *const ::std::os::raw::c_char,
    ) -> UplinkAccessResult;
}
extern "C" {
    pub fn uplink_config_open_project(
        config: UplinkConfig,
        access: *mut UplinkAccess,
    ) -> UplinkProjectResult;
}
extern "C" {
    pub fn uplink_copy_object(
        project: *mut UplinkProject,
        old_bucket_name: *const ::std::os::raw::c_char,
        old_object_key: *const ::std::os::raw::c_char,
        new_bucket_name: *const ::std::os::raw::c_char,
        new_object_key: *const ::std::os::raw::c_char,
        options: *mut UplinkCopyObjectOptions,
    ) -> UplinkObjectResult;
}
extern "C" {
    pub fn uplink_download_object(
        project: *mut UplinkProject,
        bucket_name: *const ::std::os::raw::c_char,
        object_key: *const ::std::os::raw::c_char,
        options: *mut UplinkDownloadOptions,
    ) -> UplinkDownloadResult;
}
extern "C" {
    pub fn uplink_download_read(
        download: *mut UplinkDownload,
        bytes: *mut ::std::os::raw::c_void,
        length: u64,
    ) -> UplinkReadResult;
}
extern "C" {
    pub fn uplink_download_info(download: *mut UplinkDownload) -> UplinkObjectResult;
}
extern "C" {
    pub fn uplink_free_read_result(result: UplinkReadResult);
}
extern "C" {
    pub fn uplink_close_download(download: *mut UplinkDownload) -> *mut UplinkError;
}
extern "C" {
    pub fn uplink_free_download_result(result: UplinkDownloadResult);
}
extern "C" {
    pub fn edge_register_access(
        config: EdgeConfig,
        access: *mut UplinkAccess,
        options: *mut EdgeRegisterAccessOptions,
    ) -> EdgeCredentialsResult;
}
extern "C" {
    pub fn edge_free_credentials_result(result: EdgeCredentialsResult);
}
extern "C" {
    pub fn edge_free_credentials(credentials: *mut EdgeCredentials);
}
extern "C" {
    pub fn edge_join_share_url(
        baseURL: *const ::std::os::raw::c_char,
        accessKeyID: *const ::std::os::raw::c_char,
        bucket: *const ::std::os::raw::c_char,
        key: *const ::std::os::raw::c_char,
        options: *mut EdgeShareURLOptions,
    ) -> UplinkStringResult;
}
extern "C" {
    pub fn uplink_derive_encryption_key(
        passphrase: *const ::std::os::raw::c_char,
        salt: *mut ::std::os::raw::c_void,
        length: u64,
    ) -> UplinkEncryptionKeyResult;
}
extern "C" {
    pub fn uplink_free_encryption_key_result(result: UplinkEncryptionKeyResult);
}
extern "C" {
    pub fn uplink_free_error(err: *mut UplinkError);
}
extern "C" {
    pub fn uplink_internal_UniverseIsEmpty() -> GoUint8;
}
extern "C" {
    pub fn uplink_move_object(
        project: *mut UplinkProject,
        old_bucket_name: *const ::std::os::raw::c_char,
        old_object_key: *const ::std::os::raw::c_char,
        new_bucket_name: *const ::std::os::raw::c_char,
        new_object_key: *const ::std::os::raw::c_char,
        options: *mut UplinkMoveObjectOptions,
    ) -> *mut UplinkError;
}
extern "C" {
    pub fn uplink_begin_upload(
        project: *mut UplinkProject,
        bucket_name: *const ::std::os::raw::c_char,
        object_key: *const ::std::os::raw::c_char,
        options: *mut UplinkUploadOptions,
    ) -> UplinkUploadInfoResult;
}
extern "C" {
    pub fn uplink_free_upload_info_result(result: UplinkUploadInfoResult);
}
extern "C" {
    pub fn uplink_free_upload_info(info: *mut UplinkUploadInfo);
}
extern "C" {
    pub fn uplink_commit_upload(
        project: *mut UplinkProject,
        bucket_name: *const ::std::os::raw::c_char,
        object_key: *const ::std::os::raw::c_char,
        upload_id: *const ::std::os::raw::c_char,
        options: *mut UplinkCommitUploadOptions,
    ) -> UplinkCommitUploadResult;
}
extern "C" {
    pub fn uplink_free_commit_upload_result(result: UplinkCommitUploadResult);
}
extern "C" {
    pub fn uplink_abort_upload(
        project: *mut UplinkProject,
        bucket_name: *const ::std::os::raw::c_char,
        object_key: *const ::std::os::raw::c_char,
        upload_id: *const ::std::os::raw::c_char,
    ) -> *mut UplinkError;
}
extern "C" {
    pub fn uplink_upload_part(
        project: *mut UplinkProject,
        bucket_name: *const ::std::os::raw::c_char,
        object_key: *const ::std::os::raw::c_char,
        upload_id: *const ::std::os::raw::c_char,
        part_number: u32,
    ) -> UplinkPartUploadResult;
}
extern "C" {
    pub fn uplink_part_upload_write(
        upload: *mut UplinkPartUpload,
        bytes: *mut ::std::os::raw::c_void,
        length: u64,
    ) -> UplinkWriteResult;
}
extern "C" {
    pub fn uplink_part_upload_commit(upload: *mut UplinkPartUpload) -> *mut UplinkError;
}
extern "C" {
    pub fn uplink_part_upload_abort(upload: *mut UplinkPartUpload) -> *mut UplinkError;
}
extern "C" {
    pub fn uplink_part_upload_set_etag(
        upload: *mut UplinkPartUpload,
        etag: *const ::std::os::raw::c_char,
    ) -> *mut UplinkError;
}
extern "C" {
    pub fn uplink_part_upload_info(upload: *mut UplinkPartUpload) -> UplinkPartResult;
}
extern "C" {
    pub fn uplink_free_part_result(result: UplinkPartResult);
}
extern "C" {
    pub fn uplink_free_part_upload_result(result: UplinkPartUploadResult);
}
extern "C" {
    pub fn uplink_free_part(part: *mut UplinkPart);
}
extern "C" {
    pub fn uplink_list_uploads(
        project: *mut UplinkProject,
        bucket_name: *const ::std::os::raw::c_char,
        options: *mut UplinkListUploadsOptions,
    ) -> *mut UplinkUploadIterator;
}
extern "C" {
    pub fn uplink_upload_iterator_next(iterator: *mut UplinkUploadIterator) -> bool;
}
extern "C" {
    pub fn uplink_upload_iterator_err(iterator: *mut UplinkUploadIterator) -> *mut UplinkError;
}
extern "C" {
    pub fn uplink_upload_iterator_item(
        iterator: *mut UplinkUploadIterator,
    ) -> *mut UplinkUploadInfo;
}
extern "C" {
    pub fn uplink_free_upload_iterator(iterator: *mut UplinkUploadIterator);
}
extern "C" {
    pub fn uplink_list_upload_parts(
        project: *mut UplinkProject,
        bucket_name: *const ::std::os::raw::c_char,
        object_key: *const ::std::os::raw::c_char,
        upload_id: *const ::std::os::raw::c_char,
        options: *mut UplinkListUploadPartsOptions,
    ) -> *mut UplinkPartIterator;
}
extern "C" {
    pub fn uplink_part_iterator_next(iterator: *mut UplinkPartIterator) -> bool;
}
extern "C" {
    pub fn uplink_part_iterator_err(iterator: *mut UplinkPartIterator) -> *mut UplinkError;
}
extern "C" {
    pub fn uplink_part_iterator_item(iterator: *mut UplinkPartIterator) -> *mut UplinkPart;
}
extern "C" {
    pub fn uplink_free_part_iterator(iterator: *mut UplinkPartIterator);
}
extern "C" {
    pub fn uplink_stat_object(
        project: *mut UplinkProject,
        bucket_name: *const ::std::os::raw::c_char,
        object_key: *const ::std::os::raw::c_char,
    ) -> UplinkObjectResult;
}
extern "C" {
    pub fn uplink_delete_object(
        project: *mut UplinkProject,
        bucket_name: *const ::std::os::raw::c_char,
        object_key: *const ::std::os::raw::c_char,
    ) -> UplinkObjectResult;
}
extern "C" {
    pub fn uplink_free_object_result(obj: UplinkObjectResult);
}
extern "C" {
    pub fn uplink_free_object(obj: *mut UplinkObject);
}
extern "C" {
    pub fn uplink_update_object_metadata(
        project: *mut UplinkProject,
        bucket_name: *const ::std::os::raw::c_char,
        object_key: *const ::std::os::raw::c_char,
        new_metadata: UplinkCustomMetadata,
        options: *mut UplinkUploadObjectMetadataOptions,
    ) -> *mut UplinkError;
}
extern "C" {
    pub fn uplink_list_objects(
        project: *mut UplinkProject,
        bucket_name: *const ::std::os::raw::c_char,
        options: *mut UplinkListObjectsOptions,
    ) -> *mut UplinkObjectIterator;
}
extern "C" {
    pub fn uplink_object_iterator_next(iterator: *mut UplinkObjectIterator) -> bool;
}
extern "C" {
    pub fn uplink_object_iterator_err(iterator: *mut UplinkObjectIterator) -> *mut UplinkError;
}
extern "C" {
    pub fn uplink_object_iterator_item(iterator: *mut UplinkObjectIterator) -> *mut UplinkObject;
}
extern "C" {
    pub fn uplink_free_object_iterator(iterator: *mut UplinkObjectIterator);
}
extern "C" {
    pub fn uplink_open_project(access: *mut UplinkAccess) -> UplinkProjectResult;
}
extern "C" {
    pub fn uplink_close_project(project: *mut UplinkProject) -> *mut UplinkError;
}
extern "C" {
    pub fn uplink_revoke_access(
        project: *mut UplinkProject,
        access: *mut UplinkAccess,
    ) -> *mut UplinkError;
}
extern "C" {
    pub fn uplink_free_project_result(result: UplinkProjectResult);
}
extern "C" {
    pub fn uplink_upload_object(
        project: *mut UplinkProject,
        bucket_name: *const ::std::os::raw::c_char,
        object_key: *const ::std::os::raw::c_char,
        options: *mut UplinkUploadOptions,
    ) -> UplinkUploadResult;
}
extern "C" {
    pub fn uplink_upload_write(
        upload: *mut UplinkUpload,
        bytes: *mut ::std::os::raw::c_void,
        length: u64,
    ) -> UplinkWriteResult;
}
extern "C" {
    pub fn uplink_upload_commit(upload: *mut UplinkUpload) -> *mut UplinkError;
}
extern "C" {
    pub fn uplink_upload_abort(upload: *mut UplinkUpload) -> *mut UplinkError;
}
extern "C" {
    pub fn uplink_upload_info(upload: *mut UplinkUpload) -> UplinkObjectResult;
}
extern "C" {
    pub fn uplink_upload_set_custom_metadata(
        upload: *mut UplinkUpload,
        custom: UplinkCustomMetadata,
    ) -> *mut UplinkError;
}
extern "C" {
    pub fn uplink_free_write_result(result: UplinkWriteResult);
}
extern "C" {
    pub fn uplink_free_upload_result(result: UplinkUploadResult);
}
